Card Command Library for Maple (last modified on 23 Aug 2012)

Overview
--------

The goal of this library is to provide an feature set of commands specific to
each card type. Thereby, a user can implement (at a minimum) read and writes
to a card's registers.

Reference Manual for STM32F103ZE:
http://www.st.com/internet/com/TECHNICAL_RESOURCES/TECHNICAL_LITERATURE/REFERENCE_MANUAL/CD00171190.pdf

SD Card Physical Layer Specification:
https://www.sdcard.org/downloads/pls/simplified_specs/Part_1_Physical_Layer_Simplified_Specification_Ver_3.01_Final_100518.pdf

Most of the work done to date has been to set up a C rountine API for users to 
initialize their own cards and interface with the SDIO peripheral. From this 
codebase, a C++ API will be developed for commonly used methods.
Thus far, the status of this library has beento idenitfy a card and read it's 
card specific registers.
This is known as the card initialization and identification process, and it is
complete and in the testing phase. The begin() function provides this process.





mapleFAT Proposal
=================

High-density performance line devices have one SDIO peripheral and up to three
SPI peripherals. This document seeks to explain the design specifications for 
a FAT filesystem on such devices. It will focus (for the moment) on a 
high-level description of the classes involved and their inheritance schemes.

Inheritance Structure
---------------------

           +-------------+                  +-------------+
           | SDMode-FAT  |                  | SPIMode-FAT |
           +-------------+                  +-------------+
                  |       \                /       |
                  |        \              /        |
                  |         \            /         |
                  |          +----------+          |
                  |          | mapleFAT |          |
                  |          +----------+          |
                  |                                |
                  |                                |
           +--------------+                 +-------------+
           | HardwareSDIO |                 | HardwareSPI |
           +--------------+                 +-------------+

This diagram depicts the five proposed classes. SDMode-FAT will inherit from
an SDIO specific hardware class _and_ the abstract mapleFAT class. The 
SPIMode-FAT class will do the same for it's hardware specific functions and 
both XXMode-FAT classes will have the same public calls so users can simply 
change the object instantiation line in their code to switch modes (at compile 
time).

As mentioned, mapleFAT should have definitions for all it's user visible 
functions, but it's low-level IO calls (like read and write) should be purely 
virtual. This should ensure that HardwareXXX classes define these basic 
methods: eg. virtual mapleFAT::write(where, what) = 0. 

At this point you might be wondering how to separate SD card commands from the 
FAT library. Well for one, HardwareSDIO should handle that by itself. The 
peripheral is designed to handle command and response formatting and parsing.
The SPI peripheral, on the other hand, does not. HardwareSPI is a simple 
wrapper for common settings and basic byte reads so the SPIMode-FAT will have 
to provide higher-level functionality for these calls. The ultimate goal of 
this class being block read and write functions.

Future Work
-----------

This brings us to a design decision. Some commands available in SPI mode are 
not available in SD mode and vice versa. Furthermore, responses are not 
formatted the same way and some response bits are left off entirely. I'm 
proposing that 